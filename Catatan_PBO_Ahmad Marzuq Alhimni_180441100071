BAB 1
Class VS Object
    
    Class adalah Prototipe yang ditentukan user untuk objek yang mendefinisikan seperangkat atribut yang menjadi ciri objek kelas apa pun. Atribut sendiri adalah data anggota (variabel kelas dan variabel contoh) dan metode, diakses melalui notasi titik.
    Sedangkan Objek  Adalah Contoh unik dari struktur data yang didefinisikan oleh kelasnya. Objek terdiri dari kedua anggota data (variabel kelas dan variabel contoh) dan metode.
    
Untuk Membuat Class diperlukan definisi kelas baru. Nama kelas segera mengikuti kelas kata kunci diikuti oleh titik dua sebagai berikut:

class namaClass () :
      def methode 1 (self) :
          Isi metodenya
      def metodhe 2 (self) :
          Isi metodenya
          
Contoh Class sebagai berikut:

import math
class lingkaran:
    def __init__(self,jari_jari=9):
        self.jari_jari=jari_jari

    def tampilkan_jari(self):
        print("Lingkaran dengan jari-jari =",self.jari_jari,"cm")

    def luas_permukaan(self):
        keliling_lingkaran=2*math.pi*self.jari_jari
        luas_lingkaran=math.pi*(self.jari_jari**2)
        print("Maka keliling lingkaran = %.2f"%keliling_lingkaran)
        print("Dan luas lingkaran = %.2f"%luas_lingkaran)
        
objct1=lingkaran()
objct1.tampilkan_jari()
objct1.luas_permukaan()

Maka hasil Outputnya seperti berikut:

Lingkaran dengan jari-jari = 9 cm
Maka keliling lingkaran = 56.55
Dan luas lingkaran = 254.47

BAB 2
Interitance

    Inheritance yaitu pewarisan, dimana class induk dapat menurunkan Property dan Method kepada Class anak. Dalam Inheritance ini memungkinkan mengembangkan Class awal ke Class lainnya tanpa menulis ulang dari awal.
    
    
Contoh Inharitance seperti berikut:

class user:
        name = ""
        def __init__(self,name):
            self.name=name
        def printname(self):
            print ("name="+self.name)

class programmer(user):
        def __init__(self,name):
            self.name=name
        def doPython(self):
            print ("programming python")
            
brian=user("brian")
brian.printname()
diana=programmer("diana")
diana.printname()

diana.doPython()
            
            
Maka hasil outputnya adalah:

name=brian
name=diana
programming python

BAB 3
Type of Inheritance

Dalam Inheritance ada 4 type:
1.Default
2.Overriding
3.Super Property
4.Multiple

____________________________________________________

1.Default
    Contoh:
    
        class Fish: 
            def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
                self.first_name = first_name 
                self.last_name = last_name 
                self.skeleton = skeleton 
                self.eyelids = eyelids 
            def swim(self): 
                print("The fish is swimming.") 
            def swim_backwards(self): 
                print("The fish can swim backwards."
         class Trout (Fish): 
            pass 
         class Clownfish(Fish): 
            def live_with_anemone(self): 
                print("The clownfish is coexisting with sea anemone.") 

2.Overriding
    Contoh:
        
        class Fish: 
            def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
                self.first_name = first_name 
                self.last_name = last_name 
                self.skeleton = skeleton 
                self.eyelids = eyelids 
            def swim(self): 
                print("The fish is swimming.") 
            def swim_backwards(self): 
                print("The fish can swim backwards.") 
   
        class Shark(Fish): 
            def __init__(self, first_name, last_name="Shark", skeleton="cartilage", eyelids=True): 
                self.first_name = first_name 
                self.last_name = last_name 
                self.skeleton = skeleton 
                self.eyelids = eyelids 
            def swim_backwards(self): 
                print("The shark cannot swim backwards, but can sink backwards.") 
                
3.Super Property
    Contoh:
        class Trout(Fish):
            def __init__(self,water,first_name, last_name,skeleton,eyelids):
            self.water = water
            Fish.__init__(self,first_name, last_name,skeleton, eyelids)
            super().__init__(self,first_name, last_name,skeleton, eyelids)

        terry = Trout("freshwater","shark","fish","no bone","true")
        print(terry.first_name)
     
4.Multiple
    Contoh:
        class Coral: 
            def community(self): 
                print("Coral lives in a community.") 

        class Anemone: 
            def protect_clownfish(self): 
                print("The anemone is protecting the clownfish.") 

        class CoralReef(Coral, Anemone): 
            pass 
      
        great_barrier = CoralReef() 
        great_barrier.community() 
        great_barrier.protect_clownfish()
    
    dan outputnya:
        Coral lives in a community.
        The anemone is protecting the clownfish
BAB 4
Polymorphisme

    Poli yang berarti (banyak) dan morfisme yang berarti (bentuk).
Jadi Polymorphism adalah suatu object dapat memiliki berbagai bentuk, sebagai object dari class sendiri atau object dari superclassnya.

1.Polymorphism with a Function


class shark():
    def swim(self):
        print("the sharknis swimming")
        
    def swim_backwards(self):
        print("the shark cannot swim backwards, but can sink backwards")
        
    def skeleton(self):
        print("the shark's skeleton is made or cartilage")
        
class clownfish():
    def swim(self):
        print("the clown fish can swim backwards")
        
    def swim_backwards(self):
        print("the clownfish can swim backwards")
        
    def skeleton(self):
        print("the clownfish skeleton is made of bone")
        
sammy = shark()
sammy.skeleton()
casey = clownfish()
casey.skeleton()

def in_the_pacific(fish):
    fish.swim()

in_the_pacific(sammy)
in_the_pacific(casey)

Maka outputnya adalah:

the shark's skeleton is made or cartilage
the clownfish skeleton is made of bone
the sharknis swimming
the clown fish can swim backward

2. polymorphisme with method.

class document:
    def __init__(self,name):
        self.name = name
    def show(self):
        raise notimplementederror("subclass must implement abstract method")
class pdf(document):
    def show(self):
        return 'show pdf contents!'
    
class word(document):
    def show(self):
        return 'show word contents'

document = [pdf('document1'),
           pdf('document2'),
           word('document3')]

for document in document:
    print(document.name + ':' + document.show())
    
Maka Outputnya:

document1:show pdf contents!
document2:show pdf contents!
document3:show word contents

3. polymorphisme abstarct class

class orang():
    def __init__(self,nama,umur):
        self.nama=nama
        self.umur=umur
    def tampil(self):
        raise NotImplementedError("Subclass must implemented error")
class petani(orang):
    def __init__(self,nama,umur):
        orang. __init__(self,nama,umur)
    def tampil(self):
        if self.umur>=40:
            print("Nama :",self.nama)
            print("Umur :",self.umur)
            print("Bekerja/Pensiun : Sudah Pensiun")
            return
        else:
            print("Nama :", self.nama)
            print("Umur :", self.umur)
            print("Bekerja/Pensiun : Masih bekerja")
            return
class tukang_kayu(orang):
    def view(self,nama,umur):
        orang. __init__(self,nama,umur)
    def tampil(self):
        if self.umur>=40:
            print("Nama :",self.nama)
            print("Umur :",self.umur)
            print("Bekerja/Pensiun : Sudah Pensiun")
            return
        else:
            print("Nama :", self.nama)
            print("Umur :", self.umur)
            print("Bekerja/Pensiun : Masih bekerja")
            return
a=petani(input("Masukan nama :"),int(input("Masukan umur :")))
b=tukang_kayu(input("Masukan nama :"),int(input("Masukan umur :")))

def obj(i):
    i.tampil()
obj(a)
obj(b)

maka outputnya adalah:
Masukan nama :Bambang
Masukan umur :39
Masukan nama :Bujank
Masukan umur :43
Nama : Bambang
Umur : 39
Bekerja/Pensiun : Masih bekerja
Nama : Bujank
Umur : 43
Bekerja/Pensiun : Sudah Pensiun